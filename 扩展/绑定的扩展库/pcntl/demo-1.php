<!-- 它创建一个子进程，然后父进程将等待子进程完成，最后子进程将退出。 -->
<?php

$pid = pcntl_fork();
echo $pid;
if ($pid == -1) {
    die('无法创建子进程');
} elseif ($pid) {
    echo "这是父进程，等待子进程完成\n"; 
    pcntl_waitpid($pid, $status);
    echo "子进程完成，退出状态为 $status\n";
} else {
    // 这是子进程，做一些工作...
    echo "这是子进程\n";
    sleep(5);
    echo "子进程完成\n";
    exit(0);
}

// ➜  pcntl git:(master) ✗ php demo-1.php
// <!-- 它创建一个子进程，然后父进程将等待子进程完成，最后子进程将退出。 -->
// 95435这是父进程，等待子进程完成
// 0这是子进程
// 子进程完成
// 子进程完成，退出状态为 0
// ➜  pcntl git:(master) ✗ php demo-1.php
// <!-- 它创建一个子进程，然后父进程将等待子进程完成，最后子进程将退出。 -->
// 95481这是父进程，等待子进程完成
// 0这是子进程
// 子进程完成
// 子进程完成，退出状态为 0
// ➜  pcntl git:(master) ✗ 

// 可以看到：
// pcntl_fork函数创建子进程，并使用pcntl_waitpid函数等待子进程结束。
// pcntl_fork函数会返回两次，一次在父进程中返回子进程的ID号，另一次在子进程中返回0。如果创建子进程失败，则返回-1。